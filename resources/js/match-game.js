var MatchGame = {};


/*
  Sets up a new game after HTML document has loaded.
  Renders a 4x4 board of cards.
*/
$(document).ready(function() {


/*
  Define a variable for div id game.
*/
  var $game = $('#game');


/*
  Render cards from card values generated by generateCardValues function
  and append the rendered HTML in div with id 'game'.
*/
  MatchGame.renderCards(MatchGame.generateCardValues(), $game );
});

/*
  Generates and returns an array of matching card values.
*/

MatchGame.generateCardValues = function () {


/*
  Define an empty array for cards that will be generated.
*/
  var orderedCards = [];


/*
  Push number pairs (1,1; 2,2; ... ) in to the defined array for 8 times
  (total of 16 numbers).
*/
  for (var cardIndex = 1; cardIndex < 9; cardIndex++) {
      orderedCards.push(cardIndex);
      orderedCards.push(cardIndex);
  };


/*
  Define a new array for unordered numbers (randomized), and assign the length
  of the pre-defined array (orderedCards) to a new variable.
*/
  var cardValues = [];
  var arrayLength = orderedCards.length;


/*
  Defina a variable for while loop.
*/
  var orderedCardsIndex = 0;


/*
  Pre-defined numbers are ordered. For game play we need random numbers, so we
  get random indexed numbers from the pre-defined array (orderedCards) and write
  them in a new array (cardValues).
*/
  while (orderedCardsIndex < arrayLength) {


/* Math.random function returns a floating-point between 0 and 1.
  When we multiply this with the length of pre-defined array (let's call it X)
  we get a random floating-point number between 0 and X.
  As this number is floating-point we need to convert it to an integer.
  Math.floor function returns the largest integer less than or equal to the given
  number. So we got an integer between 0 and X.
*/
    var value = Math.floor(Math.random()*(orderedCards.length));
    cardValues[orderedCardsIndex] = orderedCards[value];


/*
  Remove the number that was copied from orderedCards array.
*/
    orderedCards.splice(value, 1);
    orderedCardsIndex++;
  }


/*
  Return the unordered array as a result of the function.
*/
  return(cardValues);
}


/*
  Convert card values to jQuery card objects and add them to the supplied game
  object.
*/

MatchGame.renderCards = function(cardValues, $game) {


/*
  Define a new array as data of variable $game for flipped cards.
*/
  $game.data('flippedCards', []);


/*
  Define the CSS for cards according to their index number.
*/
  var cardColors = [
    'hsl(25, 85%, 65%)',
    'hsl(55, 85%, 65%)',
    'hsl(90, 85%, 65%)',
    'hsl(160, 85%, 65%)',
    'hsl(220, 85%, 65%)',
    'hsl(265, 85%, 65%)',
    'hsl(310, 85%, 65%)',
    'hsl(360, 85%, 65%)'];


/*
  Delete anything in the div with id game.
*/
  $game.empty();


/*
  This for loop defines each numbers background-color according to
  the index number of cardColors array.
*/
  for (var randomCardsIndex = 0; randomCardsIndex < cardValues.length; randomCardsIndex++) {


/*
  Define variables for card value, color and situation of flipped or unflipped.
*/
    var value = cardValues[randomCardsIndex];
    var color = cardColors[value - 1];
    var isFlipped = false;
    var data = {
      value: value,
      color: color,
      isFlipped: isFlipped,
    };


/*
  Print the card in div with id 'game' in HTML.
*/
    var $randomCard = $('<div class="card col-xs-3"></div>');
    $randomCard.data(data);
    $game.append($randomCard);
  }


/*
  Triggers the flipCard function as a div with class 'card' is clicked.
*/
  $('.card').click(function() {
    MatchGame.flipCard($(this), $('#game'));
  })
};


/*
  Flips over a given card and checks to see if two cards are flipped over.
  Updates styles on flipped cards depending whether they are a match or not.
*/

MatchGame.flipCard = function($card, $game) {


/* If the div clicked already flipped, the function ends */
    if ($card.data('isFlipped')) {
      return;
    }


/*
  In all other situations (unflipped), css of the div is changed according to
  the variables that were defined in renderCards function and the data of the
  div id changed so that it is known as flipped.
*/
    $card.css('background-color', $card.data('color'))
         .text($card.data('value'))
         .data('isFlipped', true);


/*
  Each flipped card is pushed at the end of the flippedCards array.
*/
    var flippedCards = $game.data('flippedCards');
    flippedCards.push($card);


/*
  Logic that queries how many divs were clicked and if 2 divs were clicked
  compares the numbers in these 2 divs. If they are the same it grayouts the div
  and leaves the value for isFlipped as true.
  So it will exit from the function if we click it again, because of the first if
  expression we defined in the begining of this function.
*/
    if (flippedCards.length === 2) {
      if (flippedCards[0].data('value') === flippedCards[1].data('value')) {
        var matchedCardsCss = {
          backgroundColor: 'rgb(153, 153, 153)',
          color: 'rgb(204, 204, 204)'
        };
        flippedCards[0].css(matchedCardsCss);
        flippedCards[1].css(matchedCardsCss);
      } else {


/*
  If the numbers are not equal the div's backgroundColor the backgroundColor
  is set back to the defaults, text is deleted from the div and data flag turned
  back to false.
*/
        var defultCss = {
          backgroundColor: 'rgb(32, 64, 86)',
        }


/*
  window.setTimeout method gives a defined delay before the action in it's
  function part is executed
*/
        window.setTimeout(function() {
          flippedCards[0].css(defultCss)
          .text('')
          .data('isFlipped', false);
          flippedCards[1].css(defultCss)
          .text('')
          .data('isFlipped', false);
        }, 500);
      }
      $game.data('flippedCards', []);
    }
};
